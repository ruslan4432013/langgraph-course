"""
LangGraph: –°—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ LangGraph.
–ì—Ä–∞—Ñ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä—ë—Ö —É–∑–ª–æ–≤ –∏ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–±—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç
–º–µ–∂–¥—É –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —ç–º–æ—Ü–∏–µ–π.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä–∞—Ñ–∞:
START ‚Üí node_1 ‚Üí (node_2 –∏–ª–∏ node_3) ‚Üí END

–ê–≤—Ç–æ—Ä: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞
"""

import random
from typing import TypedDict, Literal

from langgraph.constants import START, END
from langgraph.graph import StateGraph


# ==================== –°–û–°–¢–û–Ø–ù–ò–ï –ì–†–ê–§–ê ====================

class State(TypedDict):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞ - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –º–µ–∂–¥—É —É–∑–ª–∞–º–∏.

    –í LangGraph —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª—É–∂–∏—Ç –ø–∞–º—è—Ç—å—é –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ –≥—Ä–∞—Ñ–∞.
    –ö–∞–∂–¥—ã–π —É–∑–µ–ª –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

    Attributes:
        graph_state (str): –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –º–µ—Ä–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∑–ª—ã
    """
    graph_state: str


# ==================== –£–ó–õ–´ –ì–†–ê–§–ê ====================

def node_1(state: State) -> State:
    """
    –ü–µ—Ä–≤—ã–π —É–∑–µ–ª –≥—Ä–∞—Ñ–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—Ä–∞–∑—É "I am" –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é.

    –£–∑–ª—ã –≤ LangGraph - —ç—Ç–æ –æ–±—ã—á–Ω—ã–µ Python-—Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ:
    1. –ü—Ä–∏–Ω–∏–º–∞—é—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    2. –í—ã–ø–æ–ª–Ω—è—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—É—é –ª–æ–≥–∏–∫—É
    3. –í–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    Args:
        state (State): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞

    Returns:
        State: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑–æ–π "I am"
    """
    print('---Node 1---')  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    return {'graph_state': state['graph_state'] + ' I am'}


def node_2(state: State) -> State:
    """
    –í—Ç–æ—Ä–æ–π —É–∑–µ–ª –≥—Ä–∞—Ñ–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —ç–º–æ—Ü–∏—é "happy!".

    –≠—Ç–æ—Ç —É–∑–µ–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —É—Å–ª–æ–≤–Ω–æ–µ —Ä–µ–±—Ä–æ –≤—ã–±–µ—Ä–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å.

    Args:
        state (State): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞

    Returns:
        State: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑–æ–π " happy!"
    """
    print('---Node 2---')  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    return {'graph_state': state['graph_state'] + ' happy!'}


def node_3(state: State) -> State:
    """
    –¢—Ä–µ—Ç–∏–π —É–∑–µ–ª –≥—Ä–∞—Ñ–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —ç–º–æ—Ü–∏—é "sad!".

    –≠—Ç–æ—Ç —É–∑–µ–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —É—Å–ª–æ–≤–Ω–æ–µ —Ä–µ–±—Ä–æ –≤—ã–±–µ—Ä–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å.

    Args:
        state (State): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞

    Returns:
        State: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑–æ–π " sad!"
    """
    print('---Node 3---')  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    return {'graph_state': state['graph_state'] + ' sad!'}


# ==================== –£–°–õ–û–í–ù–´–ï –†–Å–ë–†–ê ====================

def decide_mood(state: State) -> Literal['node_2', 'node_3']:
    """
    –§—É–Ω–∫—Ü–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–±—Ä–∞ - —Ä–µ—à–∞–µ—Ç, –∫ –∫–∞–∫–æ–º—É —É–∑–ª—É –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ.

    –†—ë–±—Ä–∞ —Å–≤—è–∑—ã–≤–∞—é—Ç —É–∑–ª—ã –≤ –≥—Ä–∞—Ñ–µ. –£—Å–ª–æ–≤–Ω—ã–µ —Ä—ë–±—Ä–∞ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã–±–∏—Ä–∞—Ç—å
    —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–∫–∏ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏.

    –í —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å:
    - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (sentiment analysis)
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –õ–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    –í –Ω–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å —Å —à–∞–Ω—Å–æ–º 50/50.

    Args:
        state (State): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞

    Returns:
        Literal['node_2', 'node_3']: –ò–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    print('---Decide Mood---')  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
    user_input = state['graph_state']

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50/50
    if random.random() < 0.5:
        print('–í—ã–±—Ä–∞–Ω –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å -> node_2')
        return 'node_2'
    else:
        print('–í—ã–±—Ä–∞–Ω –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å -> node_3')
        return 'node_3'


# ==================== –ü–û–°–¢–†–û–ï–ù–ò–ï –ì–†–ê–§–ê ====================

# –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –≥—Ä–∞—Ñ–∞ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
builder = StateGraph(State)

# –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –≤ –≥—Ä–∞—Ñ
# –ö–∞–∂–¥—ã–π —É–∑–µ–ª —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
builder.add_node('node_1', node_1)
builder.add_node('node_2', node_2)
builder.add_node('node_3', node_3)

# –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞ (—Å–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏)
builder.add_edge(START, 'node_1')  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ -> node_1

# –£—Å–ª–æ–≤–Ω–æ–µ —Ä–µ–±—Ä–æ: –æ—Ç node_1 –ø–µ—Ä–µ—Ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π decide_mood
builder.add_conditional_edges('node_1', decide_mood)

# –û–±—ã—á–Ω—ã–µ —Ä—ë–±—Ä–∞: node_2 –∏ node_3 –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –≤ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ
builder.add_edge('node_2', END)
builder.add_edge('node_3', END)

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –≥—Ä–∞—Ñ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
graph = builder.compile()

# ==================== –ó–ê–ü–£–°–ö –ì–†–ê–§–ê ====================

if __name__ == '__main__':
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≥—Ä–∞—Ñ–∞.

    –ì—Ä–∞—Ñ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –º–µ—Ç–æ–¥–æ–º invoke():
    1. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ START
    2. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ node_1, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç "I am"
    3. decide_mood —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç node_2 –∏–ª–∏ node_3
    4. –í—ã–±—Ä–∞–Ω–Ω—ã–π —É–∑–µ–ª –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏—é ("happy!" –∏–ª–∏ "sad!")
    5. –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –≤ END
    """

    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ LangGraph!")
    print("=" * 40)

    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    initial_state = {'graph_state': 'Hello! My name is Ruslan.'}
    print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {initial_state['graph_state']}")
    print()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞—Ñ
    result = graph.invoke(initial_state)

    print()
    print("=" * 40)
    print(f"üéâ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['graph_state']}")
    print()
    print("–ì—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.")